@use "sass:string";
@use "../functions/is-number";
@use "linear-angle-parser";
@use "linear-positions-parser";
@use "linear-side-corner-parser";

@function linear-gradient-parser($image) {
  $image: string.unquote($image);
  $gradients: ();
  $start: string.index($image, "(");
  $end: string.index($image, ",");
  $first-val: string.slice($image, $start + 1, $end - 1);

  $prefix: string.slice($image, 1, $start);
  $suffix: string.slice($image, $end, string.length($image));

  $has-multiple-vals: string.index($first-val, " ");
  $has-single-position: string.unquote(linear-positions-parser.position-flipper($first-val) + "");
  $has-angle: is-number.is-number(string.slice($first-val, 1, 1));

  @if $has-multiple-vals {
    $gradients: linear-side-corner-parser.linear-side-corner-parser($image, $first-val, $prefix, $suffix, $has-multiple-vals);
  }

  @else if $has-single-position != "" {
    $pos: string.unquote($has-single-position + "");

    $gradients: (
      webkit-image: -webkit- + $image,
      spec-image: $prefix + "to " + $pos + $suffix
    );
  }

  @else if $has-angle {
    // Rotate degree for webkit
    $gradients: linear-angle-parser.linear-angle-parser($image, $first-val, $prefix, $suffix);
  }

  @else {
    $gradients: (
      webkit-image: -webkit- + $image,
      spec-image: $image
    );
  }

  @return $gradients;
}
