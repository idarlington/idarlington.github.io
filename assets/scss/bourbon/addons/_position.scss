@use "sass:list";
@use "sass:meta";
@use "../functions/is-length";
@use "../functions/unpack";

@charset "UTF-8";

/// Provides a quick method for setting an element’s position. Use a `null` value to “skip” a side.
///
/// @param {Position} $position [relative]
///   A CSS position value
///
/// @param {Arglist} $coordinates [null null null null]
///   List of values that correspond to the 4-value syntax for the edges of a box
///
/// @example scss - Usage
///   .element {
///     @include position(absolute, 0 null null 10em);
///   }
///
/// @example css - CSS Output
///   .element {
///     left: 10em;
///     position: absolute;
///     top: 0;
///   }
///
/// @require {function} is-length
/// @require {function} unpack

@mixin position($position: relative, $coordinates: null null null null) {
  @if meta.type-of($position) == list {
    $coordinates: $position;
    $position: relative;
  }

  $coordinates: unpack.unpack($coordinates);

  $offsets: (
    top:    list.nth($coordinates, 1),
    right:  list.nth($coordinates, 2),
    bottom: list.nth($coordinates, 3),
    left:   list.nth($coordinates, 4)
  );

  position: $position;

  @each $offset, $value in $offsets {
    @if is-length.is-length($value) {
      #{$offset}: $value;
    }
  }
}
